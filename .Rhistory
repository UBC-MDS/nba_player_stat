find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的距离
distances <- sapply(name_list, function(x) stringdist(target_name, x))
# 找到距离最小的索引
min_index <- which.min(distances)
# 返回列表中最接近的名字
return(name_list[min_index])
}
find_closest_name('Kobe Bryant',players)
players<-c(data$name)
# 加载 stringdist 包
library(stringdist)
# 定义函数
find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的距离
distances <- sapply(name_list, function(x) stringdist(target_name, x))
# 找到距离最小的索引
min_index <- which.min(distances)
# 返回列表中最接近的名字
return(name_list[min_index])
}
find_closest_name('Kobe Br',players)
players<-c(data$name)
# 加载 stringdist 包
library(stringdist)
# 定义函数
find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的距离
distances <- sapply(name_list, function(x) stringdist(target_name, x))
# 找到距离最小的索引
min_index <- which.min(distances)
# 返回列表中最接近的名字
return(name_list[min_index])
}
find_closest_name('Kobe B',players)
players<-c(data$name)
# 加载 stringdist 包
library(stringdist)
# 定义函数
find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的距离
distances <- sapply(name_list, function(x) stringdist(target_name, x))
# 找到距离最小的索引
min_index <- which.min(distances)
# 返回列表中最接近的名字
return(name_list[min_index])
}
find_closest_name('Bryant',players)
players<-c(data$name)
# 定义计算最长公共子串长度的函数
longest_common_substring_length <- function(str1, str2) {
len1 <- nchar(str1)
len2 <- nchar(str2)
result <- 0
for (i in 1:len1) {
for (j in 1:len2) {
count <- 0
while ((i + count <= len1) && (j + count <= len2) && (substr(str1, i + count, i + count) == substr(str2, j + count, j + count))) {
count <- count + 1
}
if (count > result) {
result <- count
}
}
}
return(result)
}
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的最长公共子串长度
substring_lengths <- sapply(name_list, function(x) longest_common_substring_length(target_name, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[max_index])
}
find_closest_name('Bryant',players)
players<-c(data$name)
# 定义计算最长公共子串长度的函数
longest_common_substring_length <- function(str1, str2) {
len1 <- nchar(str1)
len2 <- nchar(str2)
result <- 0
for (i in 1:len1) {
for (j in 1:len2) {
count <- 0
while ((i + count <= len1) && (j + count <= len2) && (substr(str1, i + count, i + count) == substr(str2, j + count, j + count))) {
count <- count + 1
}
if (count > result) {
result <- count
}
}
}
return(result)
}
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的最长公共子串长度
substring_lengths <- sapply(name_list, function(x) longest_common_substring_length(target_name, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[max_index])
}
find_closest_name('Kobe',players)
players<-c(data$name)
# 定义计算最长公共子串长度的函数
longest_common_substring_length <- function(str1, str2) {
len1 <- nchar(str1)
len2 <- nchar(str2)
result <- 0
for (i in 1:len1) {
for (j in 1:len2) {
count <- 0
while ((i + count <= len1) && (j + count <= len2) && (substr(str1, i + count, i + count) == substr(str2, j + count, j + count))) {
count <- count + 1
}
if (count > result) {
result <- count
}
}
}
return(result)
}
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的最长公共子串长度
substring_lengths <- sapply(name_list, function(x) longest_common_substring_length(target_name, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[max_index])
}
find_closest_name('Lebron',players)
players<-c(data$name)
# 定义计算最长公共子串长度的函数
# 定义计算最长公共子串长度的函数
longest_common_substring_length <- function(str1, str2) {
str1 <- tolower(str1)
str2 <- tolower(str2)
len1 <- nchar(str1)
len2 <- nchar(str2)
result <- 0
for (i in 1:len1) {
for (j in 1:len2) {
count <- 0
while ((i + count <= len1) && (j + count <= len2) && (substr(str1, i + count, i + count) == substr(str2, j + count, j + count))) {
count <- count + 1
}
if (count > result) {
result <- count
}
}
}
return(result)
}
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的最长公共子串长度
substring_lengths <- sapply(name_list, function(x) longest_common_substring_length(target_name, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[max_index])
}
find_closest_name('LeBron',players)
players<-c(data$name)
# 定义计算最长公共子串长度的函数
# 定义计算最长公共子串长度的函数
longest_common_substring_length <- function(str1, str2) {
str1 <- tolower(str1)
str2 <- tolower(str2)
len1 <- nchar(str1)
len2 <- nchar(str2)
result <- 0
for (i in 1:len1) {
for (j in 1:len2) {
count <- 0
while ((i + count <= len1) && (j + count <= len2) && (substr(str1, i + count, i + count) == substr(str2, j + count, j + count))) {
count <- count + 1
}
if (count > result) {
result <- count
}
}
}
return(result)
}
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的最长公共子串长度
substring_lengths <- sapply(name_list, function(x) longest_common_substring_length(target_name, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[max_index])
}
find_closest_name('Le',players)
players<-c(data$name)
# 定义计算最长公共子串长度的函数
# 定义计算最长公共子串长度的函数
longest_common_substring_length <- function(str1, str2) {
str1 <- tolower(str1)
str2 <- tolower(str2)
len1 <- nchar(str1)
len2 <- nchar(str2)
result <- 0
for (i in 1:len1) {
for (j in 1:len2) {
count <- 0
while ((i + count <= len1) && (j + count <= len2) && (substr(str1, i + count, i + count) == substr(str2, j + count, j + count))) {
count <- count + 1
}
if (count > result) {
result <- count
}
}
}
return(result)
}
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 计算目标名字与列表中每个名字的最长公共子串长度
substring_lengths <- sapply(name_list, function(x) longest_common_substring_length(target_name, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[max_index])
}
find_closest_name('Leb',players)
players<-c(data$name)
library(triebeard)
install.packages('triebeard')
players<-c(data$name)
library(triebeard)
# 创建 Trie 对象
trie <- triebeard::trie()
players<-c(data$name)
library(triebeard)
# 创建 Trie 对象
trie <- triebeard::trie()
players<-c(data$name)
library(triebeard)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 创建前缀树（Trie）
trie <- triebeard::trie()
name_list_lower <- tolower(name_list)
triebeard::insert(trie, keys = name_list_lower)
# 获取前缀树中与目标名字相似的名字
similar_names <- triebeard::lookup(trie, target_name)
# 计算目标名字与前缀树中相似名字的最长公共子串长度
substring_lengths <- sapply(similar_names, function(x) longest_common_substring_length(target_name, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[match(similar_names[max_index], name_list_lower)])
}
find_closest_name('Leb',players)
players<-c(data$name)
library(triebeard)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 创建前缀树（Trie）
trie <- triebeard::trie()
name_list_lower <- tolower(name_list)
triebeard::insert(trie, keys = name_list_lower)
# 获取前缀树中与目标名字相似的名字
similar_names <- triebeard::lookup(trie, target_name)
# 计算目标名字与前缀树中相似名字的最长公共子串长度
substring_lengths <- sapply(similar_names, function(x) longest_common_substring_length(target_name, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[match(similar_names[max_index], name_list_lower)])
}
find_closest_name('Leb',players)
players<-c(data$name)
library(triebeard)
# 加载 dplyr 包
library(dplyr)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 过滤出包含目标名字前缀的名字
similar_names <- name_list_lower[str_detect(name_list_lower, target_name_lower)]
# 计算目标名字与相似名字的最长公共子串长度
substring_lengths <- sapply(similar_names, function(x) longest_common_substring_length(target_name_lower, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[match(similar_names[max_index], name_list_lower)])
}
find_closest_name('Leb',players)
players<-c(data$name)
library(triebeard)
# 加载 dplyr 包
library(dplyr)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 过滤出包含目标名字前缀的名字
similar_names <- name_list_lower[str_detect(name_list_lower, target_name_lower)]
# 计算目标名字与相似名字的最长公共子串长度
substring_lengths <- sapply(similar_names, function(x) longest_common_substring_length(target_name_lower, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[match(similar_names[max_index], name_list_lower)])
}
find_closest_name('Le',players)
players<-c(data$name)
library(triebeard)
# 加载 dplyr 包
library(dplyr)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 过滤出包含目标名字前缀的名字
similar_names <- name_list_lower[str_detect(name_list_lower, target_name_lower)]
# 计算目标名字与相似名字的最长公共子串长度
substring_lengths <- sapply(similar_names, function(x) longest_common_substring_length(target_name_lower, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[match(similar_names[max_index], name_list_lower)])
}
find_closest_name('kob',players)
players<-c(data$name)
library(triebeard)
# 加载 dplyr 包
library(dplyr)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 过滤出包含目标名字前缀的名字
similar_names <- name_list_lower[str_detect(name_list_lower, target_name_lower)]
# 计算目标名字与相似名字的最长公共子串长度
substring_lengths <- sapply(similar_names, function(x) longest_common_substring_length(target_name_lower, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[match(similar_names[max_index], name_list_lower)])
}
find_closest_name('bryan',players)
players<-c(data$name)
library(triebeard)
# 加载 dplyr 包
library(dplyr)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 过滤出包含目标名字前缀的名字
similar_names <- name_list_lower[str_detect(name_list_lower, target_name_lower)]
# 计算目标名字与相似名字的最长公共子串长度
substring_lengths <- sapply(similar_names, function(x) longest_common_substring_length(target_name_lower, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[match(similar_names[max_index], name_list_lower)])
}
find_closest_name('bryant',players)
players<-c(data$name)
library(triebeard)
# 加载 dplyr 包
library(dplyr)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 过滤出包含目标名字前缀的名字
similar_names <- name_list_lower[str_detect(name_list_lower, target_name_lower)]
# 计算目标名字与相似名字的最长公共子串长度
substring_lengths <- sapply(similar_names, function(x) longest_common_substring_length(target_name_lower, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[match(similar_names[max_index], name_list_lower)])
}
find_closest_name('lebra',players)
players<-c(data$name)
library(triebeard)
# 加载 dplyr 包
library(dplyr)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 过滤出包含目标名字前缀的名字
similar_names <- name_list_lower[str_detect(name_list_lower, target_name_lower)]
# 计算目标名字与相似名字的最长公共子串长度
substring_lengths <- sapply(similar_names, function(x) longest_common_substring_length(target_name_lower, x))
# 找到最长公共子串长度最大的索引
max_index <- which.max(substring_lengths)
# 返回列表中最接近的名字
return(name_list[match(similar_names[max_index], name_list_lower)])
}
find_closest_name('lebran',players)
players<-c(data$name)
# 加载 stringdist 包
library(stringdist)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 计算目标名字与列表中每个名字的 Jaro-Winkler 距离
distances <- sapply(name_list_lower, function(x) stringdist(target_name_lower, x, method = "jw"))
# 找到距离最小的索引
min_index <- which.min(distances)
# 返回列表中最接近的名字
return(name_list[min_index])
}
find_closest_name('lebran',players)
players<-c(data$name)
# 加载 stringdist 包
library(stringdist)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 计算目标名字与列表中每个名字的 Jaro-Winkler 距离
distances <- sapply(name_list_lower, function(x) stringdist(target_name_lower, x, method = "jw"))
# 找到距离最小的索引
min_index <- which.min(distances)
# 返回列表中最接近的名字
return(name_list[min_index])
}
find_closest_name('lebran',players)
players<-c(data$name)
# 加载 stringdist 包
library(stringdist)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 计算目标名字与列表中每个名字的 Jaro-Winkler 距离
distances <- sapply(name_list_lower, function(x) stringdist(target_name_lower, x, method = "jw"))
# 找到距离最小的索引
min_index <- which.min(distances)
# 返回列表中最接近的名字
return(name_list[min_index])
}
find_closest_name('lebran jeme',players)
shiny::runApp('lab/nba_player_stat')
install.packages('ggradar')
runApp('lab/nba_player_stat')
runApp('lab/nba_player_stat')
install.packages('ggradar')
install.packages("devtools")
devtools::install_github("ricardo-bion/ggradar")
runApp('lab/nba_player_stat')
library(tidyverse)
data <- read_csv("player_data.csv")
players<-c(data$name)
# 加载 stringdist 包
library(stringdist)
# 定义寻找最接近名字的函数
find_closest_name <- function(target_name, name_list) {
# 将名字转换为小写
target_name_lower <- tolower(target_name)
name_list_lower <- tolower(name_list)
# 计算目标名字与列表中每个名字的 Jaro-Winkler 距离
distances <- sapply(name_list_lower, function(x) stringdist(target_name_lower, x, method = "jw"))
# 找到距离最小的索引
min_index <- which.min(distances)
# 返回列表中最接近的名字
return(name_list[min_index])
}
find_closest_name('lebran jeme',players)
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
update.packages("shinyWidgets")
shiny::runApp()
remove.packages("shinyWidgets")
install.packages("shinyWidgets")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("remotes")
remotes::install_github("daattali/shinycssloaders")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
install.packages("devtools")
devtools::install_github("ricardo-bion/ggradar")
runApp()
shiny::runApp()
